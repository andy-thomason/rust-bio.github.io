{"name":"Rust-Bio, a bioinformatics library for the Rust language.","tagline":"","body":"[![Build Status](https://travis-ci.org/rust-bio/rust-bio.svg?branch=master)](https://travis-ci.org/rust-bio/rust-bio)\r\n[![](http://meritbadge.herokuapp.com/bio)](https://crates.io/crates/bio)\r\n\r\nThis library makes many algorithms and data structures that are useful for bioinformatics available for the [Rust language](https://www.rust-lang.org).\r\nAll provided implementations are rigorously tested via continuous\r\nintegration.\r\n\r\nCurrently, Rust-Bio provides\r\n\r\n* most major pattern matching algorithms,\r\n* a convenient alphabet implementation,\r\n* pairwise alignment,\r\n* suffix arrays,\r\n* BWT and FM-Index,\r\n* FMD-Index for finding supermaximal exact matches,\r\n* a q-gram index,\r\n* a rank/select data structure,\r\n* FASTQ and FASTA and BED readers and writers,\r\n* helper functions for combinatorics and dealing with log probabilities.\r\n\r\nFor reading and writing BAM and BCF files, Rust-Bio is complemented by [Rust-Htslib](https://github.com/christopher-schroeder/rust-htslib).\r\n\r\n## Resources\r\n\r\n* [News](https://github.com/rust-bio/rust-bio/releases)\r\n* [API Documentation](https://rust-bio.github.io/rust-bio)\r\n* [Issues](https://github.com/rust-bio/rust-bio/issues)\r\n* [Roadmap](https://github.com/rust-bio/rust-bio/issues/3)\r\n* [Continuous integration tests](https://travis-ci.org/rust-bio/rust-bio)\r\n\r\n\r\n## Usage\r\n\r\nWe explain how to use Rust-Bio step-by-step. Users who already have experience with Rust can skip the first two steps.\r\n\r\n### Step 1: Setting up Rust\r\n\r\nCurrently, Rust-Bio needs the development version (nightly) of Rust to compile properly, since it depends on features that are not in the stable branch yet.\r\nRust nightly can be installed or updated by executing\r\n\r\n```bash\r\ncurl -sSf https://static.rust-lang.org/rustup.sh | sh -s -- --channel=nightly\r\n```\r\nin your terminal.\r\nFor details or alternative ways of installation, have a look at the \"Nightly\" section of the Rust [download page](https://www.rust-lang.org/install.html).\r\n\r\n### Step 2: Setting up a new Rust project\r\n\r\nSince Rust-Bio is a library, you need to setup your own new Rust project to use Rust-Bio.\r\nWith Rust, projects and their dependencies are managed with the builtin package manager [Cargo](https://crates.io/).\r\nTo create a new Rust project, issue\r\n\r\n```bash\r\ncargo new hello_world --bin\r\ncd hello_world\r\n```\r\nin your terminal. The flag `--bin` tells Cargo to create an executable project instead of a library.\r\nIn [this section](http://doc.rust-lang.org/nightly/book/hello-cargo.html#a-new-project) of the Rust docs, you find details about what Cargo just created for you.\r\n\r\nYour new project can be compiled with\r\n```bash\r\ncargo build\r\n```\r\nand executed with\r\n```bash\r\ncargo run\r\n```\r\nIf you are new to Rust, we suggest to proceed with [learning Rust](http://doc.rust-lang.org/nightly/book/learn-rust.html) via the Rust docs.\r\n\r\n### Step 3: Use Rust-Bio from your project\r\n\r\nTo use Rust-Bio in your Rust project, add the following to your `Cargo.toml`\r\n\r\n```toml\r\n[dependencies]\r\nbio = \"*\"\r\n```\r\n\r\nand import the crate from your source code:\r\n\r\n```rust\r\nextern crate bio;\r\n```\r\n\r\n### Example\r\n\r\nAn example usage of Rust-Bio is presented in the following:\r\n```rust\r\n// Import some modules\r\nuse bio::alphabets;\r\nuse bio::data_structures::suffix_array::suffix_array;\r\nuse bio::data_structures::bwt::bwt;\r\nuse bio::data_structures::fmindex::FMIndex;\r\nuse bio::io::fastq;\r\n\r\n// Create an FM-Index for a given text.\r\nlet alphabet = alphabets::dna::iupac_alphabet();\r\nlet pos = suffix_array(text);\r\nlet bwt = bwt(text, &pos);\r\nlet fmindex = FMIndex::new(&bwt, 3, &alphabet);\r\n\r\n\r\n// Iterate over a FASTQ file, use the alphabet to validate read\r\n// sequences and search for exact matches in the FM-Index.\r\nlet reader = fastq::Reader::from_file(\"reads.fastq\");\r\nfor record in reader.records() {\r\n    let seq = record.seq();\r\n    if alphabet.is_word(seq) {\r\n        let interval = fmindex.backward_search(seq.iter());\r\n        let positions = interval.occ(&pos);\r\n    }\r\n}\r\n```\r\nFor more information and additional examples, please read the [documentation](https://rust-bio.github.io/rust-bio).\r\n\r\n## Benchmarks\r\n\r\nSince Rust-Bio is based on a compiled language, similar performance to C/C++ based libraries can be expected. Indeed, we find the pattern matching algorithms of Rust-Bio to perform in the range of the C++ library Seqan:\r\n\r\n| Algorithm | Rust-Bio | Seqan   |\r\n| --------- | -------: | ------: |\r\n| BNDM      | 77ms     | 80ms    |\r\n| Horspool  | 122ms    | 125ms   |\r\n| BOM       | 103ms    | 107ms   |\r\n| Shift-And | 241ms    | 545ms   |\r\n\r\nWe measured 10000 iterations of searching pattern `GCGCGTACACACCGCCCG` in the sequence of the hg38 MT chromosome.\r\nInitialization time of each algorithm for the given pattern was included in each iteration. Benchmarks were conducted with *Cargo bench* for Rust-Bio and *Python timeit* for Seqan on an Intel Core i5-3427U CPU.\r\nBenchmarking Seqan from *Python timeit* entails an overhead of 1.46ms for calling a C++ binary. This overhead was subtracted from above Seqan run times.\r\nNote that this benchmark only compares the two libraries to exemplify that Rust-Bio has comparable speed to C++ libraries: all used algorithms have their advantages for specific text and pattern structures and lengths (see [the pattern matching section in the documentation](http://rust-bio.github.io/rust-bio/bio/pattern_matching/index.html)).\r\n\r\n## Author\r\n\r\nJohannes Köster (<koester@jimmy.harvard.edu>)\r\n\r\n## Contributors\r\n\r\n* Christopher Schröder (<christopher.schroeder@uni-due.de>)\r\n* Peer Aramillo Irizar\r\n* Fedor Gusev\r\n\r\nThe next name in this list could be you! If you are interested in joining the effort to build a general purpose Rust bioinformatics library, just introduce yourself [here](https://github.com/rust-bio/rust-bio/issues/3), or issue a pull request with your first contribution.\r\n\r\n## License\r\n\r\nLicensed under the MIT license http://opensource.org/licenses/MIT. This project may not be copied, modified, or distributed except according to those terms.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}